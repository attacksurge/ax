#!/bin/bash

###########################################################################################################
# Header
#
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/ax-completion.sh"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)
start="$(pwd)"
BASEOS="$(uname)"
case $BASEOS in
'Darwin')
    PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
    ;;
*) ;;
esac

###########################################################################################################
# Help Menu
#
help() {
    echo -e "${BGreen}Ax Framework - Distributed Cloud Scanning Platform${Color_Off}"
    echo -e "${BGreen}Usage:${Color_Off} ax <command> [options]"
    echo -e "Use 'ax <command> --help' to get more details on a specific command."
    echo
    echo -e "${BGreen}Setup & Configuration:${Color_Off}"
    echo -e "  account-setup              Start interactive account setup wizard"
    echo -e "  account [name]             Switch to a different cloud account"
    echo -e "  configure                  Run Ax configuration (install dependencies, set up environment)"
    echo -e "  build [provisioner]        Build a base image with pre-installed tools (using Packer)"
    echo
    echo -e "${BGreen}Instance Lifecycle Management:${Color_Off}"
    echo -e "  init [options]             Launch a single cloud instance (use --run to auto-generate a random name)"
    echo -e "  fleet [options]            Spin up a fleet of multiple instances (with optional count, regions)"
    echo -e "  fleet2 [options]           A faster but experimental axiom-fleet"
    echo -e "  deploy <profile>           Deploy instances from a profile (in ~/.axiom/profiles)"
    echo -e "  ls                         List all active instances in current account"
    echo -e "  select <pattern>           Select instances matching pattern for subsequent operations"
    echo -e "  ssh <instance>             SSH into the specified instance"
    echo -e "  exec <command>             Run a shell command on selected instances in parallel"
    echo -e "  rm <pattern>               Terminate (destroy) instances matching name or pattern"
    echo -e "  power <on|off> <pattern>   Power on or off instances matching pattern"
    echo
    echo -e "${BGreen}Instance Configuration Management:${Color_Off}"
    echo -e "  images                     Manage instance snapshots (list, create, select, delete images)"
    echo -e "  sizes                      Manage default instance size (list, select, restore default size)"
    echo -e "  disks                      Manage default boot disk size (list, select, restore default disk size)"
    echo
    echo -e "${BGreen}Regions:${Color_Off}"
    echo -e "  region                     Manage default region (list available, select default)"
    echo
    echo -e "${BGreen}File Operations:${Color_Off}"
    echo -e "  scp                        Transfer files to/from instances in parallel (uses SCP-style syntax with patterns)"
    echo -e "  sync                       Sync an instance's home directory to local (download via rsync)"
    echo
    echo -e "${BGreen}Scanning:${Color_Off}"
    echo -e "  scan                       Run distributed scans using configured modules across fleet"
    echo
    echo -e "${BGreen}System Operations:${Color_Off}"
    echo -e "  update                     Update Ax to the latest version (git pull in ~/.axiom)"
    echo -e "  --help                     Display this help menu"
    echo
    echo -e "${BGreen}Examples:${Color_Off}"
    echo -e "  ax configure --setup --shell zsh --unattended             # Run initial configuration (no prompts, zsh shell)"
    echo -e "  ax account-setup                                          # Start interactive account setup wizard"
    echo -e "  ax account linode                                         # Switch to 'linode' cloud account"
    echo -e "  ax build default                                          # Build base image using 'default' provisioner"
    echo -e "  ax init mybox1                                            # Launch one instance named 'mybox1'"
    echo -e "  ax fleet -i 5 -r nyc1,nyc3,fra1 myfleet                   # Launch 5 instances across regions (prefix 'myfleet')"
    echo -e "  ax ls                                                     # List running instances"
    echo -e "  ax ssh mybox1                                             # SSH into instance 'mybox1'"
    echo -e "  ax select myfleet*                                        # Select all 'myfleet' instances"
    echo -e "  ax exec 'uptime'                                          # Run 'uptime' on all selected instances"
    echo -e "  ax scp wordlist.txt 'myfleet*':/tmp/wordlist.txt --split  # Split and upload a wordlist to all 'myfleet' instances"
    echo -e "  ax scan targets.txt -m nuclei -o out.txt                  # Run a Nuclei scan on targets (distributed)"
    echo -e "  ax rm myfleet*                                            # Terminate all 'myfleet' instances"
    echo
}

###########################################################################################################
#  Display axiom banner and authors
#
banner() {
cat << EOF >&2

 █████╗ ██╗  ██╗
██╔══██╗╚██╗██╔╝
███████║ ╚███╔╝
██╔══██║ ██╔██╗
██║  ██║██╔╝ ██╗
╚═╝  ╚═╝╚═╝  ╚═╝

Maintainer: 0xtavian
EOF
echo ''
echo '
 "𝓲𝓷𝓼𝓹𝓲𝓻𝓮𝓭 𝓫𝔂 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷"
 "𝓽𝓱𝓮 𝓬𝓸𝓷𝓽𝓲𝓷𝓾𝓪𝓽𝓲𝓸𝓷 𝓸𝓯 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷"
 "𝓬𝓸𝓷𝓽𝓲𝓷𝓾𝓮𝓭 𝓯𝓻𝓸𝓶 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷"
 "𝓫𝓪𝓼𝓲𝓬𝓪𝓵𝓵𝔂, 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷 "
 "𝓶𝓲𝓰𝓱𝓽 𝓪𝓼 𝔀𝓮𝓵𝓵 𝓫𝓮 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷"
 "𝓪𝓵𝓻𝓲𝓰𝓱𝓽, 𝔂𝓸𝓾 𝓰𝓸𝓽 𝓶𝓮, 𝓲𝓽𝓼 𝓳𝓾𝓼𝓽 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷"
 "𝓼𝓽𝓸𝓵𝓮𝓷 𝓯𝓻𝓸𝓶 𝓪𝔁𝓲𝓸𝓶: 𝓽𝓱𝓮 𝓭𝔂𝓷𝓪𝓶𝓲𝓬 𝓲𝓷𝓯𝓻𝓪𝓼𝓽𝓻𝓾𝓬𝓽𝓾𝓻𝓮 𝓯𝓻𝓪𝓶𝓮𝔀𝓸𝓻𝓴 𝓯𝓸𝓻 𝓮𝓿𝓮𝓻𝔂𝓫𝓸𝓭𝔂! - @𝓹𝓻𝔂0𝓬𝓬 @0𝔁𝓽𝓪𝓿𝓲𝓪𝓷"
 ' | xargs shuf -n1 -e
echo ''

help
}

###########################################################################################################
#  Parse command line arguments
#
if [ $# -eq 0 ]; then
    banner
    exit 0
fi

# Capture the first argument (input)
input="$1"

# Check if the corresponding axiom script exists and run it with remaining arguments
if test -f "$AXIOM_PATH/interact/axiom-$input"; then
    axiom-$input "${@:2}"
else
    echo -e "${Red}Error: ${White}axiom-$input${Color_Off}${Red} script does not exist in ~/.axiom/interact${Color_Off}"
fi
